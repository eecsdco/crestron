/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:Adam Bauserman
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT PWROFF 0
#DEFINE_CONSTANT PWRUP 1
#DEFINE_CONSTANT PWRON 2
#DEFINE_CONSTANT PWRWAIT 3
#DEFINE_CONSTANT PWRDOWN 4

#DEFINE_CONSTANT SRCLAPTOP 1
#DEFINE_CONSTANT SRCDVDVCR 2
#DEFINE_CONSTANT SRCDOCCAM 3

#DEFINE_CONSTANT FULL_VOLUME 55296  // was 63488
#DEFINE_CONSTANT MIN_VOLUME 10240  // was 0
#DEFINE_CONSTANT DEFAULT_VOLUME 35840 //65536/2
#DEFINE_CONSTANT VOLUME_STEP 512 //65536/64


// #CATEGORY "" 
// #DEFAULT_VOLATILE
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT btn_laptop, btn_dvdvcr, btn_doccam, btn_volup, btn_voldn, btn_off, btn_problem, 
	update_clock, vol_clock, proj_error, setup_mode, proj_wait, btn_screen;
// ANALOG_INPUT 
STRING_INPUT com_a_rx$[100];
// BUFFER_INPUT 

DIGITAL_OUTPUT fb_laptop, fb_dvdvcr, fb_doccam, fb_volup, fb_voldn, fb_off, fb_problem, fb_blink,
	proj_on, proj_off, proj_laptop, proj_doccam, proj_video, proj_vidmute_on, proj_vidmute_off,
	proj_sndmute_on, proj_sndmute_off, proj_voldn, proj_volup, fb_proj_on, 
	snd_beep, snd_startup, snd_alert, snd_off, report_problem, get_info, master_volup, master_voldn,
	screen_down, screen_up, fb_screen, fb_poweroffwait, fb_warmingup, fb_coolingdown;
ANALOG_OUTPUT aud_vol, proj_source, aud_source;
STRING_OUTPUT power$, source$, error$, log$, proj_log$;

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
// STRUCTURE MyStruct1
// {
// };

// MyStruct1 struct;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER source, power, problem, proj_busy, proj_startup;

// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

// sends the proper output signals to select the proper source on the projector,
//  and also changes any other video gear as necessary to make this source appear.
Function SourceSelect()
{               
	// select source on projector
	if(source = SRCLAPTOP) Pulse(1,proj_laptop);
	else if (source = SRCDOCCAM) Pulse(1,proj_doccam);
	else if (source = SRCDVDVCR) Pulse(1,proj_video);
}

Function ChangeState(Integer statePower, Integer stateSource)
{
	power = statePower;
	source = stateSource;

	proj_source = source;
	
	// set button feedback (LEDs)
	if(power = PWRUP || power = PWRON) {
		fb_proj_on = 1;
		if(source = SRCLAPTOP) {
			fb_laptop = 1;
			fb_dvdvcr = 0;
			fb_doccam = 0;
			fb_off = 0;
		} else if(source = SRCDVDVCR) {
			fb_laptop = 0;
			fb_dvdvcr = 1;
			fb_doccam = 0;
			fb_off = 0;
		} else {
			fb_laptop = 0;
			fb_dvdvcr = 0;
			fb_doccam = 1;
			fb_off = 0;
		}
	} else {  	// states PWROFF, PWRWAIT, PWRDOWN
		fb_proj_on = 0;
		fb_laptop = 0;
		fb_dvdvcr = 0;
		fb_doccam = 0;
		fb_off = 1;
	}       
	
	if(power = PWROFF)
	{
		fb_poweroffwait = 0;
		fb_warmingup = 0;
		fb_coolingdown = 0;	
	}
	
	if(power = PWRUP)
	{
		fb_poweroffwait = 0;
		fb_warmingup = 1;
		fb_coolingdown = 0;	
	}
	
	if(power = PWRON)
	{
		fb_poweroffwait = 0;
		fb_warmingup = 0;
		fb_coolingdown = 0;	
	}
	
	if(power = PWRWAIT)
	{
		fb_poweroffwait = 1;
		fb_warmingup = 0;
		fb_coolingdown = 0;	
	}
	
	if(power = PWRDOWN)
	{
		fb_poweroffwait = 0;
		fb_warmingup = 0;
		fb_coolingdown = 1;	
	}

	
	// set whether LED is blinking
	if(power = PWROFF || power = PWRON) fb_blink = 0;
	else fb_blink = 1;
	
	// set string feedback for RoomView
	switch(power) {
	Case(PWROFF):
		power$ = "Off";
	Case(PWRUP):
		power$ = "Warming up";
	Case(PWRON):
		power$ = "On";
	Case(PWRWAIT):
		power$ = "Power-off delay";
	Case(PWRDOWN):
		power$ = "Cooling off";
	Default:
		power$ = "";
	}
	
	switch(source) {
	Case(SRCLAPTOP):
		source$ = "Laptop";
	Case(SRCDVDVCR):
		source$ = "DVD/VCR";
	Case(SRCDOCCAM):
		source$ = "Doc Cam";
	Default:
		source$ = "";
	}

	// print debug info to console
	Print("ChangeState(%d,%d)\n",power,source);

	// send event to e-DataLog
	proj_log$ = ItoA(power) + "||" + ItoA(source);
}
 

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH btn_screen
{
	if ( fb_screen = 0 )   // it's up, bring it down
	{
		Pulse(50,screen_down);
	    fb_screen = 1;
	}
	else
	{
		Pulse(50,screen_up);  // it's down, bring it up
	    fb_screen = 0;
	}
}

PUSH btn_off
{       
	// ignored unless power is on
	if(power=PWRON)
	{		
		ChangeState(PWRWAIT,source);
		Pulse(1,snd_off);
		// set audio to no source, volume to default
		aud_source = 0;
		aud_vol = DEFAULT_VOLUME;
		// blank screen and mute audio
		Pulse(1,proj_vidmute_on);
		// wait 10 seconds before sending off command
        wait(1000,OffWait)
		{
			Pulse(1,proj_vidmute_off);
			Pulse(1,proj_off);
			ChangeState(PWRDOWN,source);
			// bring up projection screen
    		Pulse(50,screen_up);
    		fb_screen = 0;
			// wait for projector to cool
			wait(4000,ProjOff)
			{
				ChangeState(PWROFF,source);
			}
		}
	}		
		
		
}

PUSH btn_laptop
{
	if(power = PWROFF) {
		ChangeState(PWRUP,SRCLAPTOP);
		// send projector on signal
    	Pulse(1,proj_on); 
    	// set audio defaults
		aud_source = 0;
		aud_vol = DEFAULT_VOLUME;
    	// bring down projection screen
    	Pulse(50,screen_down);
    	fb_screen = 1;
    	// set audio to laptop source
		aud_source = 3;
		// play sound
		Pulse(1,snd_startup);
		// set flag to indicate projector is starting up
		proj_startup = 1;
		Wait(1500) // wait 15 sec for source select
		{
			// send source select
			SourceSelect();
			
			// clear proj_startup flag
			proj_startup = 0;
		}
		// wait 45 sec to change state
		Wait(3800)
		{
			ChangeState(PWRON,source);
			Pulse(1,get_info);
		}
		//proj_busy = 1; // disable input until source select
	}
	else if((power=PWRON || power=PWRWAIT) && !proj_busy) {
		// play sound
		Pulse(1,snd_beep);
		// stop projector from powering down
		ChangeState(PWRON,SRCLAPTOP);
		CancelWait(OffWait);
		Pulse(1,proj_vidmute_off);		
		// send source select
		SourceSelect();
		// set audio to laptop source
		aud_source = 3;
	}
	// send source select immediately
	else if(power = PWRUP && !proj_busy) {
		// play sound
		Pulse(1,snd_beep);
		ChangeState(PWRUP,SRCLAPTOP);
		// don't send source select if projector is just starting up
		if(!proj_startup) SourceSelect();
		// set audio to laptop source
		aud_source = 3;
	}
}

PUSH btn_dvdvcr
{
	if(power = PWROFF) {
		ChangeState(PWRUP,SRCDVDVCR);
		// send projector on signal
    	Pulse(1,proj_on);  
    	// set audio defaults
		aud_source = 0;
		aud_vol = DEFAULT_VOLUME;
    	// bring down projection screen
    	Pulse(50,screen_down);
    	fb_screen = 1;
    	// set audio to dvd/vcr source
		aud_source = 4;
		// play sound
		Pulse(1,snd_startup);
		// set flag to indicate projector is starting up
		proj_startup = 1;
		Wait(1500) // wait 15 sec for source select
		{
			// send source select
			SourceSelect();
			
			// clear proj_startup flag
			proj_startup = 0;
		}

		// wait 45 sec to change state
		Wait(3800)
		{
			ChangeState(PWRON,source);
			Pulse(1,get_info); // get bulb hours
		}
		//proj_busy = 1; // disable input until source select
	}
	// send source select immediately
	else if((power=PWRON || power=PWRWAIT) && !proj_busy) {
		// play sound
		Pulse(1,snd_beep);
		// stop projector from powering down
		ChangeState(PWRON,SRCDVDVCR);
		CancelWait(OffWait);
		Pulse(1,proj_vidmute_off);
		// send source select
		SourceSelect();
		// set audio to dvd/vcr source
		aud_source = 4;
	}
	// send source select immediately
	else if(power = PWRUP && !proj_busy) {
		// play sound
		Pulse(1,snd_beep);
		ChangeState(PWRUP,SRCDVDVCR);
		// don't send source select if projector is just starting up
		if(!proj_startup) SourceSelect();
		// set audio to dvd/vcr source
		aud_source = 4;
	}
}          
    
PUSH btn_doccam
{
	if(power = PWROFF) {
		ChangeState(PWRUP,SRCDOCCAM);
		// send projector on signal
    	Pulse(1,proj_on);         
    	// set audio defaults
		aud_source = 0;
		aud_vol = DEFAULT_VOLUME;
		// bring down projection screen
    	Pulse(50,screen_down);
    	fb_screen = 1;
    	// set audio to no source
		aud_source = 0;
    	// play sound
		Pulse(1,snd_startup);
		// set flag to indicate projector is starting up
		proj_startup = 1;
		Wait(1500) // wait 15 sec for source select
		{
			// send source select
			SourceSelect();
			
			// clear proj_startup flag
			proj_startup = 0;
		}
		// wait 45 sec to change state
		Wait(3800)
		{
			ChangeState(PWRON,source);
			Pulse(1,get_info);
		}
		//proj_busy = 1; // disable input until source select
	}
	else if((power=PWRON || power=PWRWAIT) && !proj_busy) {
		// play sound
		Pulse(1,snd_beep);
		// stop projector from powering down
		ChangeState(PWRON,SRCDOCCAM);
		CancelWait(OffWait);
		Pulse(1,proj_vidmute_off);		
		// send source select
		SourceSelect();
		// set audio to no source
		aud_source = 0;
	}
	// send source select immediately
	else if(power = PWRUP && !proj_busy) {
		// play sound
		Pulse(1,snd_beep);
		ChangeState(PWRUP,SRCDOCCAM);
		// don't send source select if projector is just starting up
		if(!proj_startup) SourceSelect();
		// set audio to no source
		aud_source = 0;
	}
}


CHANGE vol_clock
{
	// change volume
	// dvd/vcr and laptop volume is changed by default
	// mic and master volumes can be changed if system is in setup mode
	if(!setup_mode && !btn_off)
	{
		if(btn_volup)
		{
			Pulse(1,proj_volup);
			if ( (FULL_VOLUME - aud_vol) >= VOLUME_STEP ) aud_vol = aud_vol + VOLUME_STEP;
		}
		else if(btn_voldn)
		{
			Pulse(1,proj_voldn);
			if( aud_vol >= (MIN_VOLUME + VOLUME_STEP) ) aud_vol = aud_vol - VOLUME_STEP;
		}
	} else if(setup_mode) {
		if(btn_problem) { // adjust master vol when problem report button is pressed
			if(btn_volup)Pulse(1,master_volup);
			if(btn_voldn)Pulse(1,master_voldn);
		} else {  // otherwise adjust mic volume -no mic support in this case
			//if(btn_volup)Pulse(1,mic_volup);
			//if(btn_voldn)Pulse(1,mic_voldn);
		}
	}
}
 
PUSH btn_problem
{
	if(!setup_mode) // ignore button in setup mode
	{
		if(!problem){
			Pulse(1,snd_alert);
			fb_problem = 1;
			problem = 1;
			Wait(1000,ProblemWait){
				report_problem = 1;
				log$ = "problem reported by user";
			}
		} else {
			fb_problem = 0;
			problem = 0;
			CancelWait(ProblemWait);
			report_problem = 0;
			log$ = "problem report cleared by user";
		}
	}
}
  
PUSH update_clock
{
	// set string feedback for RoomView
	switch(power) {
	Case(PWROFF):
		power$ = "Off";
	Case(PWRUP):
		power$ = "Warming up";
	Case(PWRON):
		power$ = "On";
	Case(PWRWAIT):
		power$ = "Power-off delay";
	Case(PWRDOWN):
		power$ = "Cooling off";
	Default:
		power$ = "";
	}
	
	switch(source) {
	Case(SRCLAPTOP):
		source$ = "Laptop";
	Case(SRCDVDVCR):
		source$ = "DVD/VCR";
	Case(SRCDOCCAM):
		source$ = "Doc Cam";
	Default:
		source$ = "";
	}
}

PUSH proj_error
{
	error$ = "4:projector fatal error";	
}


/*
RELEASE input
{
    // TODO:  Add code here
}
*/

/*
CHANGE input
{
    // TODO:  Add code here
}
*/

/*
EVENT
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	problem = 0;
    ChangeState(PWROFF,SRCLAPTOP);
	proj_busy = 0;
	proj_startup = 0;
	
	fb_screen = 0;
	Pulse(50,screen_up);
	
}

