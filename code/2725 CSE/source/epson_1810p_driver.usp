/*******************************************************************************************
EPSON 1810p Projector Driver
*******************************************************************************************/
/*
Dealer Name:University of Michigan; CoE Instructional Technology
System Name:
System Number:
Programmer:David Coviak
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
#CATEGORY "24" // TV/Video Projector
// #DEFAULT_VOLATILE
#DEFAULT_NONVOLATILE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT power_on, power_off, input_dsub_rgb, input_bnc_rgb, input_video, get_info, mute_on,
	mute_off,vol_up,vol_dn, send_init, input_svid, proj_auto_setup;
ANALOG_INPUT volume;
STRING_INPUT serin$[100];
// BUFFER_INPUT 

DIGITAL_OUTPUT fb_power, fb_source, error, waiting;
ANALOG_OUTPUT bulb_hours, queue_count;
STRING_OUTPUT serdata$, rv_error$, rv_log$; 

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
// STRUCTURE MyStruct1
// {
// }

// MyStruct1 struct;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER vol_changed; // was a volume change sent recently?
INTEGER queued; // number of commands in queue
INTEGER repeats; // number of times failed command has been repeated
INTEGER notresponding; // set to 1 if no response, cleared on response
STRING in$[100]; // temporary location for serial input
STRING temp[20]; // temporary string
STRING outbuffer$[1000]; // buffer of commands to be sent to the projector
STRING lastcmd$[100]; // command currently being executed by projector

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function WaitForProj ()
{
	// look for projector response ":" within time limit
	// otherwise generate a fatal error
	// (this usually indicates projector power or serial line is disconnected)
	if(Len(lastcmd$) > 0)
	{
		Wait(6000,WaitProjResponse)
		{
			// send error to roomview and reset queue			
			queued = 0;
			repeats = 0;
			outbuffer$ = "";
			rv_error$ = "4:projector not responding";
			print("projector not responding\n");
			notresponding = 1; // set flag, clear later on response
			
		}
	}	
}


Function PushCmd (String cmd$)
{
	if(queued)
	{
		// enqueue command
		outbuffer$ = outbuffer$ + cmd$ + Chr(13);
		queued = queued + 1;
		Print("Pushed command: %s\n",cmd$);
	} else {
		Print("Sent command: %s\n", cmd$);
		// store command (in case an error is returned)
		lastcmd$ = cmd$ + Chr(13);
		// send command immediately
		serdata$ = lastcmd$;
		// set queue count
		queued = 1;
		// activate timeout
		WaitForProj();
	}
	// update digital output
	waiting = queued;
	// update analog output
	queue_count = queued;
}

String_Function PopCmd ()
{
	// decrement queue count
	queued = queued - 1;
	// update digital output
	waiting = queued;
	// update analog output
	queue_count = queued;
	// remove string from outbuffer
	// until (and including) the CR
	Return(Remove(Chr(13),outbuffer$));
}

Function CutInLineCmd (String cmd$)
{
	if (queued)
	{
		outbuffer$ = lastcmd$ + outbuffer$;
		lastcmd$ = cmd$ + Chr(13);
		queued = queued + 1;
		Print("Cut in line command: %s\n",cmd$);
		// send command immediately
		serdata$ = lastcmd$;
		// update digital output
		waiting = queued;
		// update analog output
		queue_count = queued;
	}
	else PushCmd(cmd$);
}

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH power_on
{
    // empty the queue (just in case something is in there)
	queued = 0;
	outbuffer$ = "";
    
    // empty the input buffer from the projector (in case some errant char got in somehow)
	ClearBuffer(serin$);
	                
	// send power on cmd
	PushCmd("PWR ON");
	fb_power = 1;
}

PUSH power_off
{
    PushCmd("PWR OFF");
	//serdata$ = "PWR OFF" + Chr(13);
	fb_power = 0;
}

PUSH proj_auto_setup
{
	PushCmd("FREEZE OFF");
	PushCmd("HREVERSE OFF");
	PushCmd("VREVERSE ON");
}

   
PUSH input_dsub_rgb
{
    PushCmd("SOURCE 11");
}

PUSH input_bnc_rgb
{
    PushCmd("SOURCE B1");
}

PUSH input_video
{
    PushCmd("SOURCE 41");
}   

PUSH input_svid
{
    PushCmd("SOURCE 42");
}


PUSH get_info
{
	PushCmd("LAMP?");
}	
       
PUSH mute_on
{
	PushCmd("MSEL 00");   //black screen
	PushCmd("MUTE ON");
}
    
PUSH mute_off
{
	PushCmd("MUTE OFF");
	PushCmd("MSEL 01");   //blue screen
}

PUSH vol_up
{
	PushCmd("KEY 21");
	// indicate that volume has been recently changed
	vol_changed = 1;
	Wait(100) vol_changed = 0;
}                                                                        

PUSH vol_dn
{
	PushCmd("KEY 22");
	// indicate that volume has been recently changed
	vol_changed = 1;
	Wait(100) vol_changed = 0;
}
     
CHANGE volume
{       
	INTEGER vol_step;                              
	vol_step = volume / 2048;
	temp = "VOL " + ItoA(vol_step * 8);
	PushCmd(temp);
}

CHANGE serin$
{
	in$ = in$ + serin$;
		
	Print("[projector->] %s\n",in$);

	if(find(":", in$)) {
		if(left(in$, 3) = "ERR") {
			// projector is responding, so cancel the error timer
			CancelWait(WaitProjResponse);
			// if the error message didn't result from a volume change,
			// then resend the last command
			if(!vol_changed) {
				if(repeats < 5) { // resend command (at most 5 times)
					Wait(100,WaitRepeat) { // wait a second before resending
						// keep track of how many times we retried the command
						repeats = repeats + 1;
					
						// resend last command to projector
						serdata$ = lastcmd$;
						
						// activate timeout
						WaitForProj();
					
						// send warning to roomview
						MakeString(rv_log$,"Command resent to proj due to error: %s\n",lastcmd$);
						//rv_error$ = "2:command resent to projector in response to error";
						print("Command resent to projector: %s\n", lastcmd$);
					}
				} else { // resend has failed 5 times
					// send error to roomview and reset queue			
					queued = 0;
					repeats = 0;
					outbuffer$ = "";
					ClearBuffer(serin$);
					rv_error$ = "4:error returned after 5 attempts to send command to proj";
					print("Error returned after 5 attempts\n");
				}
			}
		} else {
			// projector is responding, so cancel the error timer
			CancelWait(WaitProjResponse);      

			//handle differently if it is a bulb report
			if(left(in$, 4) = "LAMP") {
				bulb_hours = atoi(in$); //I do not like the atoi function for this...
			}

			// command successful, so set repeat count back to 0
			repeats = 0;
			// clear "not responding" error, if one has been sent
			if(notresponding)
			{
				notresponding = 0; // clear error flag
				// clear error status in roomview
				rv_error$ = "0:projector responded, error cleared";
			}
			// send next command in queue
			if(queued)
			{
				temp = PopCmd();
				if (Len(temp)=0)
				{
					Print("Queue empty.\n");
				}
				else
				{
					Print("Popped command: %s\n",temp);
					serdata$ = temp;
				}
				// store command (in case an error is returned)
				lastcmd$ = temp;
				// activate timeout (will ignore empty lastcmd string)
				WaitForProj();
			}
		}
		in$ = "";
	}
}

PUSH send_init
{
 	PushCmd("VKEYSTONE 0");
	PushCmd("HKEYSTONE 0");
	PushCmd("MUTE OFF");
	PushCmd("FREEZE OFF");
	PushCmd("HREVERSE OFF");
	PushCmd("VREVERSE ON");
}

/*
RELEASE input
{
    // TODO:  Add code here
}
*/

/*
CHANGE input
{
    // TODO:  Add code here
}
*/

/*
EVENT
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    vol_changed = 0;

	queued = 0;

	repeats = 0;      
	
	notresponding = 0;

	outbuffer$ = "";
	
	fb_power = 0;
}
